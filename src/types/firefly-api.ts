/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    Account: {
      created_at?: string
      updated_at?: string
      name: string
      /**
       * Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.
       */
      type:
      | 'asset'
      | 'expense'
      | 'import'
      | 'revenue'
      | 'cash'
      | 'liability'
      | 'liabilities'
      | 'initial-balance'
      | 'reconciliation'
      iban?: string
      bic?: string
      account_number?: string
      opening_balance?: number
      opening_balance_date?: string
      virtual_balance?: number
      current_balance?: number
      current_balance_date?: string
      /**
       * Use either currency_id or currency_code. Defaults to the user's default currency.
       */
      currency_id?: number
      /**
       * Use either currency_id or currency_code. Defaults to the user's default currency.
       */
      currency_code?: string
      currency_symbol?: string
      currency_decimal_places?: number
      /**
       * If omitted, defaults to true.
       */
      active?: boolean
      /**
       * If omitted, defaults to true.
       */
      include_net_worth?: boolean
      /**
       * Is only mandatory when the type is asset.
       */
      account_role?:
      | 'defaultAsset'
      | 'sharedAsset'
      | 'savingAsset'
      | 'ccAsset'
      | 'cashWalletAsset'
      /**
       * Mandatory when the account_role is ccAsset. Can only be monthlyFull.
       */
      credit_card_type?: 'monthlyFull' | null
      /**
       * Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
       */
      monthly_payment_date?: string | null
      /**
       * Mandatory when type is liability. Specifies the exact type.
       */
      liability_type?: 'loan' | 'debt' | 'mortgage'
      /**
       * Mandatory when type is liability. Amount of money in the liability. Must be positive.
       */
      liability_amount?: number
      /**
       * Mandatory when type is liability. Start date for the liability.
       */
      liability_start_date?: string
      /**
       * Mandatory when type is liability. Interest percentage.
       */
      interest?: string
      /**
       * Mandatory when type is liability. Period over which the interest is calculated.
       */
      interest_period?: 'daily' | 'monthly' | 'yearly'
      notes?: string
    }
    AccountArray: {
      data: Array<components['schemas']['AccountRead']>
      meta: components['schemas']['Meta']
    }
    AccountRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Account']
    }
    AccountSearchFieldFilter: 'all' | 'iban' | 'name' | 'number' | 'id'
    AccountSingle: { data: components['schemas']['AccountRead'] }
    AccountTypeFilter:
    | 'all'
    | 'asset'
    | 'cash'
    | 'expense'
    | 'revenue'
    | 'special'
    | 'hidden'
    | 'liability'
    | 'liabilities'
    | 'Default account'
    | 'Cash account'
    | 'Asset account'
    | 'Expense account'
    | 'Revenue account'
    | 'Initial balance account'
    | 'Beneficiary account'
    | 'Import account'
    | 'Reconciliation account'
    | 'Loan'
    | 'Debt'
    | 'Mortgage'
    AccountTypeProperty:
    | 'Default account'
    | 'Cash account'
    | 'Asset account'
    | 'Expense account'
    | 'Revenue account'
    | 'Initial balance account'
    | 'Beneficiary account'
    | 'Import account'
    | 'Reconciliation account'
    | 'Loan'
    | 'Debt'
    | 'Mortgage'
    Attachment: {
      created_at?: string
      updated_at?: string
      filename: string
      /**
       * The object class to which the attachment must be linked.
       */
      attachable_type: 'Bill' | 'TransactionJournal' | 'ImportJob'
      /**
       * ID of the model this attachment is linked to.
       */
      attachable_id: number
      /**
       * MD5 hash of the file for basic duplicate detection.
       */
      md5?: string
      download_uri?: string
      upload_uri?: string
      title?: string
      notes?: string
      mime?: string
      size?: number
    }
    AttachmentArray: {
      data: Array<components['schemas']['AttachmentRead']>
      meta: components['schemas']['Meta']
    }
    AttachmentRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Attachment']
      links: components['schemas']['ObjectLink']
    }
    AttachmentSingle: { data: components['schemas']['AttachmentRead'] }
    AvailableBudget: {
      created_at?: string
      updated_at?: string
      /**
       * Use either currency_id or currency_code.
       */
      currency_id?: number
      /**
       * Use either currency_id or currency_code.
       */
      currency_code?: string
      currency_symbol?: string
      currency_decimal_places?: number
      amount: number
      /**
       * Start date of the available budget.
       */
      start: string
      /**
       * End date of the available budget.
       */
      end: string
      spent_in_budgets?: Array<components['schemas']['BudgetSpent']>
      spent_outside_budget?: Array<components['schemas']['BudgetSpent']>
    }
    AvailableBudgetArray: {
      data: Array<components['schemas']['AvailableBudgetRead']>
      meta: components['schemas']['Meta']
    }
    AvailableBudgetRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['AvailableBudget']
    }
    AvailableBudgetSingle: {
      data: components['schemas']['AvailableBudgetRead']
    }
    BasicSummary: Array<components['schemas']['BasicSummaryEntry']>
    BasicSummaryEntry: {
      /**
       * This is a reference to the type of info shared, not influenced by translations or user preferences.
       */
      key?: string
      /**
       * A translated title for the information shared.
       */
      title?: string
      /**
       * The amount as a float.
       */
      monetary_value?: number
      /**
       * The currency ID of the associated currency.
       */
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals for the associated currency.
       */
      currency_decimal_places?: number
      /**
       * The amount formatted according to the users locale
       */
      value_parsed?: string
      /**
       * Reference to a font-awesome icon without the fa- part.
       */
      local_icon?: string
      /**
       * A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.
       */
      sub_title?: string
    }
    Bill: {
      created_at?: string
      updated_at?: string
      /**
       * Use either currency_id or currency_code
       */
      currency_id?: number
      /**
       * Use either currency_id or currency_code
       */
      currency_code?: string
      currency_symbol?: string
      currency_decimal_places?: number
      name: string
      amount_min: number
      amount_max: number
      date: string
      /**
       * How often the bill must be paid.
       */
      repeat_freq: 'weekly' | 'monthly' | 'quarterly' | 'half-year' | 'yearly'
      /**
       * How often the bill must be skipped. 1 means a bi-monthly bill.
       */
      skip?: number
      /**
       * If the bill is active.
       */
      active?: boolean
      notes?: string
      /**
       * When the bill is expected to be due.
       */
      next_expected_match?: string
      /**
       * The group ID of the group this object is part of. NULL if no group.
       */
      object_group_id?: number
      /**
       * The order of the group. At least 1, for the highest sorting.
       */
      object_group_order?: number
      /**
       * The name of the group. NULL if no group.
       */
      object_group_title?: string
      /**
       * Array of future dates when the bill is expected to be paid. Autogenerated.
       */
      pay_dates?: string[]
      /**
       * Array of past transactions when the bill was paid.
       */
      paid_dates?: Array<{
        /**
         * Transaction group ID of the paid bill.
         */
        transaction_group_id?: number
        /**
         * Transaction journal ID of the paid bill.
         */
        transaction_journal_id?: number
        /**
         * Date the bill was paid.
         */
        date?: string
      }>
    }
    BillArray: {
      data: Array<components['schemas']['BillRead']>
      meta: components['schemas']['Meta']
    }
    BillRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Bill']
    }
    BillSingle: { data: components['schemas']['BillRead'] }
    Budget: {
      created_at?: string
      updated_at?: string
      name: string
      active?: boolean
      order?: number
      /**
       * Information on how much was spent in this budget. Is only filled in when the start and end date are submitted.
       */
      spent?: Array<components['schemas']['BudgetSpent']>
    }
    BudgetArray: {
      data: Array<components['schemas']['BudgetRead']>
      meta: components['schemas']['Meta']
    }
    BudgetLimit: {
      created_at?: string
      updated_at?: string
      /**
       * Use either currency_id or currency_code. Defaults to the user's default currency.
       */
      currency_id?: number
      /**
       * Use either currency_id or currency_code. Defaults to the user's default currency.
       */
      currency_code?: string
      currency_symbol?: string
      currency_decimal_places?: number
      /**
       * The budget ID of the associated budget.
       */
      budget_id: number
      /**
       * Start date of the budget limit.
       */
      start: string
      /**
       * End date of the budget limit.
       */
      end: string
      amount: number
      spent?: Array<components['schemas']['BudgetSpent']>
    }
    BudgetLimitArray: {
      data: Array<components['schemas']['BudgetLimitRead']>
      meta: components['schemas']['Meta']
    }
    BudgetLimitRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['BudgetLimit']
    }
    BudgetLimitSingle: { data: components['schemas']['BudgetLimitRead'] }
    BudgetRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Budget']
    }
    BudgetSingle: { data: components['schemas']['BudgetRead'] }
    BudgetSpent: {
      /**
       * The amount spent.
       */
      sum?: number
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals supported by the currency
       */
      currency_decimal_places?: number
    }
    Category: {
      created_at?: string
      updated_at?: string
      name: string
      spent?: Array<components['schemas']['CategorySpent']>
      earned?: Array<components['schemas']['CategoryEarned']>
    }
    CategoryArray: {
      data: Array<components['schemas']['CategoryRead']>
      meta: components['schemas']['Meta']
    }
    CategoryEarned: {
      start?: string
      end?: string
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals supported by the currency
       */
      currency_decimal_places?: number
      /**
       * The amount earned.
       */
      amount?: number
    }
    CategoryRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Category']
    }
    CategorySingle: { data: components['schemas']['CategoryRead'] }
    CategorySpent: {
      start?: string
      end?: string
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals supported by the currency
       */
      currency_decimal_places?: number
      /**
       * The amount spent.
       */
      amount?: number
    }
    ChartBar: Array<components['schemas']['ChartDataSet']>
    ChartDataPoint: {
      /**
       * The key is the label of the value, so for example: '2018-01-01' => 13 or 'Groceries' => -123.
       */
      key?: string
    }
    ChartDataSet: {
      /**
       * This is the title of the current set. It can refer to an account, a budget or another object (by name).
       */
      label?: string
      /**
       * The currency ID of the currency associated to the data in the entries.
       */
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals for the currency associated to the data in the entries.
       */
      currency_decimal_places?: number
      /**
       * Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.
       */
      type?: string
      /**
       * Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).
       */
      yAxisID?: number
      /**
       * The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value.
       */
      entries?: Array<components['schemas']['ChartDataPoint']>
    }
    ChartLine: Array<components['schemas']['ChartDataSet']>
    ChartPie: Array<components['schemas']['ChartDataSet']>
    Configuration: {
      data?: {
        is_demo_site?: boolean
        /**
         * If the user has given permission to check for updates.
         * - null = never asked.
         * - -1 = never asked.
         * - 0 = no permission.
         * - 1 = permission
         */
        permission_update_check?: number | null
        last_update_check?: string
        /**
         * Whether other users can register.
         */
        single_user_mode?: boolean
      }
    }
    ConfigurationUpdate: {
      /**
       * Can be a number or a boolean. This depends on the actual configuration value.
       */
      value: string
    }
    Currency: {
      created_at?: string
      updated_at?: string
      /**
       * defaults to true
       */
      enabled?: boolean
      /**
       * Make this currency the default currency.
       */
      default?: boolean
      code: string
      name: string
      symbol: string
      /**
       * Supports 0-16 decimals.
       */
      decimal_places?: number
    }
    CurrencyArray: {
      data: Array<components['schemas']['CurrencyRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    CurrencyRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Currency']
    }
    CurrencySingle: { data: components['schemas']['CurrencyRead'] }
    ExchangeRate: {
      /**
       * Immutable value
       */
      type?: string
      id?: number
      attributes?: {
        created_at?: string
        updated_at?: string
        from_currency_id?: number
        from_currency_name?: string
        from_currency_code?: string
        from_currency_symbol?: string
        from_currency_decimal_places?: number
        to_currency_id?: number
        to_currency_code?: string
        to_currency_symbol?: string
        to_currency_decimal_places?: number
        date?: string
        rate?: number
        /**
         * The amount in the "to"-currency, if provided in the request.
         */
        amount?: number
      }
    }
    ExchangeRateArray: {
      data: Array<components['schemas']['ExchangeRate']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    ImportJob: {
      /**
       * Immutable value
       */
      type?: string
      id?: number
      attributes?: {
        created_at?: string
        updated_at?: string
        /**
         * ID of the tag related to the import job, if present.
         */
        tag_id?: number
        /**
         * Tag related to the import job, if present.
         */
        tag_tag?: string
        /**
         * Import job unique identifier.
         */
        key?: string
        /**
         * File type, if relevant.
         */
        file_type?: string
        /**
         * Import provider that did the import.
         */
        provider?: string
        /**
         * Status of import job.
         */
        status?: string
        /**
         * Current stage.
         */
        stage?: string
        /**
         * JSON string with job-specific configuration.
         */
        configuration?: string
        /**
         * JSON string with job-specific status.
         */
        extended_status?: string
        /**
         * JSON string with a count of transactions in the job.
         */
        transactions?: string
        /**
         * JSON string with a list of errors.
         */
        errors?: string
      }
    }
    ImportJobArray: {
      data: Array<components['schemas']['ImportJob']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    ImportJobSingle: { data: components['schemas']['ImportJob'] }
    LinkType: {
      name: string
      inward: string
      outward: string
      editable?: boolean
    }
    LinkTypeArray: {
      data: Array<components['schemas']['LinkTypeRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    LinkTypeRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['LinkType']
      links: components['schemas']['ObjectLink']
    }
    LinkTypeSingle: { data: components['schemas']['LinkTypeRead'] }
    Meta: {
      pagination?: {
        total?: number
        count?: number
        per_page?: number
        current_page?: number
        total_pages?: number
      }
    }
    ObjectLink: { '0'?: { rel?: string, uri?: string }, self?: string }
    PageLink: { self?: string, first?: string, last?: string }
    PiggyBank: {
      created_at?: string
      updated_at?: string
      name: string
      /**
       * The ID of the asset account this piggy bank is connected to.
       */
      account_id: number
      /**
       * The name of the asset account this piggy bank is connected to.
       */
      account_name?: string
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals supported by the currency
       */
      currency_decimal_places?: number
      target_amount: number
      percentage?: number
      current_amount?: number
      left_to_save?: number
      save_per_month?: number
      /**
       * The date you started with this piggy bank.
       */
      start_date?: string
      /**
       * The date you intend to finish saving money.
       */
      target_date?: string
      order?: number
      active?: boolean
      notes?: string
      /**
       * The group ID of the group this object is part of. NULL if no group.
       */
      object_group_id?: number
      /**
       * The order of the group. At least 1, for the highest sorting.
       */
      object_group_order?: number
      /**
       * The name of the group. NULL if no group.
       */
      object_group_title?: string
    }
    PiggyBankArray: {
      data: Array<components['schemas']['PiggyBankRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    PiggyBankEvent: {
      created_at?: string
      updated_at?: string
      currency_id?: number
      currency_code?: string
      currency_symbol?: string
      currency_decimal_places?: number
      amount?: number
      /**
       * The journal associated with the event.
       */
      journal_id?: number
      transaction_id?: number
    }
    PiggyBankEventArray: {
      data: Array<components['schemas']['PiggyBankEventRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    PiggyBankEventRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['PiggyBank']
      links: components['schemas']['ObjectLink']
    }
    PiggyBankRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['PiggyBank']
      links: components['schemas']['ObjectLink']
    }
    PiggyBankSingle: { data: components['schemas']['PiggyBankRead'] }
    Preference: {
      created_at?: string
      updated_at?: string
      name?: string
      /**
       * This field can also be an array
       */
      data: string
    }
    PreferenceArray: {
      data: Array<components['schemas']['PreferenceRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    PreferenceRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Preference']
    }
    PreferenceSingle: { data: components['schemas']['PreferenceRead'] }
    Recurrence: {
      created_at?: string
      updated_at?: string
      type:
      | 'withdrawal'
      | 'transfer'
      | 'deposit'
      | 'opening-balance'
      | 'reconciliation'
      title: string
      /**
       * Not to be confused with the description of the actual transaction(s) being created.
       */
      description?: string
      /**
       * First time the recurring transaction will fire. Must be after today.
       */
      first_date: string
      /**
       * First time the recurring transaction will fire. Must be after today.
       */
      latest_date?: string
      /**
       * Date until the recurring transaction can fire. Use either this field or repetitions.
       */
      repeat_until?: string
      /**
       * Max number of created transactions. Use either this field or repeat_until.
       */
      nr_of_repetitions?: number
      /**
       * Whether or not to fire the rules after the creation of a transaction.
       */
      apply_rules?: boolean
      /**
       * If the recurrence is even active.
       */
      active?: boolean
      notes?: string
      repetitions?: Array<components['schemas']['RecurrenceRepetition']>
      transactions?: Array<components['schemas']['RecurrenceTransaction']>
    }
    RecurrenceArray: {
      data: Array<components['schemas']['RecurrenceRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    RecurrenceRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Recurrence']
      links: components['schemas']['ObjectLink']
    }
    RecurrenceRepetition: {
      id?: number
      created_at?: string
      updated_at?: string
      /**
       * The type of the repetition. ndom means: the n-th weekday of the month, where you can also specify which day of the week.
       */
      type: 'daily' | 'weekly' | 'ndom' | 'monthly' | 'yearly'
      /**
       * Information that defined the type of repetition.
       * - For 'daily', this is empty.
       * - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
       * - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month
       * - For 'monthly' it is the day of the month (1 - 31)
       * - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
       */
      moment: string
      /**
       * How many occurrences to skip. 0 means skip nothing. 1 means every other.
       */
      skip?: number
      /**
       * How to respond when the recurring transaction falls in the weekend. Possible values:
       * 1. Do nothing, just create it
       * 2. Create no transaction.
       * 3. Skip to the previous Friday.
       * 4. Skip to the next Monday.
       */
      weekend?: number
      /**
       * Auto-generated repetition description.
       */
      description?: string
      /**
       * Array of future dates when the repetition will apply to. Auto generated.
       */
      occurrences?: string[]
    }
    RecurrenceSingle: { data: components['schemas']['RecurrenceRead'] }
    RecurrenceTransaction: {
      description: string
      /**
       * Amount of the transaction.
       */
      amount: number
      /**
       * Foreign amount of the transaction.
       */
      foreign_amount?: number | null
      /**
       * Submit either a currency_id or a currency_code.
       */
      currency_id?: number
      /**
       * Submit either a currency_id or a currency_code.
       */
      currency_code?: string
      currency_symbol?: string
      /**
       * Number of decimals in the currency
       */
      currency_decimal_places?: number
      /**
       * Submit either a foreign_currency_id or a foreign_currency_code, or neither.
       */
      foreign_currency_id?: number | null
      /**
       * Submit either a foreign_currency_id or a foreign_currency_code, or neither.
       */
      foreign_currency_code?: string | null
      foreign_currency_symbol?: string | null
      /**
       * Number of decimals in the currency
       */
      foreign_currency_decimal_places?: number | null
      /**
       * The budget ID for this transaction.
       */
      budget_id?: number
      /**
       * The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
       */
      budget_name?: string | null
      /**
       * Category ID for this transaction.
       */
      category_id?: number
      /**
       * Category name for this transaction.
       */
      category_name?: string
      /**
       * ID of the source account. Submit either this or source_name.
       */
      source_id?: number
      /**
       * Name of the source account. Submit either this or source_id.
       */
      source_name?: string
      source_iban?: string | null
      source_type?: components['schemas']['AccountTypeProperty']
      /**
       * ID of the destination account. Submit either this or destination_name.
       */
      destination_id?: number
      /**
       * Name of the destination account. Submit either this or destination_id.
       */
      destination_name?: string
      destination_iban?: string | null
      destination_type?: components['schemas']['AccountTypeProperty']
      /**
       * Array of tags.
       */
      tags?: string[] | null
      /**
       * Optional. Use either this or the piggy_bank_name
       */
      piggy_bank_id?: number
      /**
       * Optional. Use either this or the piggy_bank_id
       */
      piggy_bank_name?: string
    }
    Rule: {
      created_at?: string
      updated_at?: string
      title: string
      description?: string
      /**
       * ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.
       */
      rule_group_id: number
      /**
       * Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.
       */
      rule_group_title?: string
      order?: number
      /**
       * Which action is necessary for the rule to fire? Use either store-journal or update-journal.
       */
      trigger: 'store-journal' | 'update-journal'
      /**
       * Whether or not the rule is even active. Default is true.
       */
      active?: boolean
      /**
       * If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
       */
      strict?: boolean
      /**
       * If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
       */
      stop_processing?: boolean
      triggers: Array<components['schemas']['RuleTrigger']>
      actions: Array<components['schemas']['RuleAction']>
    }
    RuleAction: {
      id?: number
      created_at?: string
      updated_at?: string
      /**
       * The type of thing this action will do. A limited set is possible.
       */
      type:
      | 'user_action'
      | 'set_category'
      | 'clear_category'
      | 'set_budget'
      | 'clear_budget'
      | 'add_tag'
      | 'remove_tag'
      | 'remove_all_tags'
      | 'set_description'
      | 'append_description'
      | 'prepend_description'
      | 'set_source_account'
      | 'set_destination_account'
      | 'set_notes'
      | 'append_notes'
      | 'prepend_notes'
      | 'clear_notes'
      | 'link_to_bill'
      | 'convert_withdrawal'
      | 'convert_deposit'
      | 'convert_transfer'
      /**
       * The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.
       */
      value: string | null
      /**
       * Order of the action
       */
      order?: number
      /**
       * If the action is active.
       */
      active?: boolean
      /**
       * When true, other actions will not be fired after this action has fired.
       */
      stop_processing?: boolean
    }
    RuleArray: {
      data: Array<components['schemas']['RuleRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    RuleGroup: {
      created_at?: string
      updated_at?: string
      title: string
      description?: string
      order?: number
      active?: boolean
    }
    RuleGroupArray: {
      data: Array<components['schemas']['RuleGroupRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    RuleGroupRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['RuleGroup']
      links: components['schemas']['ObjectLink']
    }
    RuleGroupSingle: { data: components['schemas']['RuleGroupRead'] }
    RuleRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Rule']
      links: components['schemas']['ObjectLink']
    }
    RuleSingle: { data: components['schemas']['RuleRead'] }
    RuleTrigger: {
      id?: number
      created_at?: string
      updated_at?: string
      /**
       * The type of thing this trigger responds to. A limited set is possible
       */
      type:
      | 'from_account_starts'
      | 'from_account_ends'
      | 'from_account_is'
      | 'from_account_contains'
      | 'to_account_starts'
      | 'to_account_ends'
      | 'to_account_is'
      | 'to_account_contains'
      | 'amount_less'
      | 'amount_exactly'
      | 'amount_more'
      | 'description_starts'
      | 'description_ends'
      | 'description_contains'
      | 'description_is'
      | 'transaction_type'
      | 'category_is'
      | 'budget_is'
      | 'tag_is'
      | 'currency_is'
      | 'has_attachments'
      | 'has_no_category'
      | 'has_any_category'
      | 'has_no_budget'
      | 'has_any_budget'
      | 'has_no_tag'
      | 'has_any_tag'
      | 'notes_contain'
      | 'notes_start'
      | 'notes_end'
      | 'notes_are'
      | 'no_notes'
      | 'any_notes'
      /**
       * The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.
       */
      value: string
      /**
       * Order of the trigger
       */
      order?: number
      /**
       * If the trigger is active.
       */
      active?: boolean
      /**
       * When true, other triggers will not be checked if this trigger was triggered.
       */
      stop_processing?: boolean
    }
    SystemInfo: {
      data: {
        version: string
        api_version: string
        php_version: string
        os: string
        driver: string
      }
    }
    TagArray: {
      data: Array<components['schemas']['TagRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    TagCloud: { tags?: Array<components['schemas']['TagCloudTag']> }
    TagCloudTag: {
      /**
       * The tag
       */
      tag?: string
      /**
       * ID of the tag
       */
      id?: number
      /**
       * The total amount of money related to this tag. There is no currency information available, and this is a basic sum of all amounts added together.
       */
      size?: number
      /**
       * A number between 0 and 1. 1 is given to the largest tag in the tag cloud, and 0 to the smallest. The rest are given a number between 0 and 1, related to their size in comparison to the largest tag.
       */
      relative?: number
    }
    TagModel: {
      created_at?: string
      updated_at?: string
      /**
       * The tag
       */
      tag: string
      /**
       * The date to which the tag is applicable.
       */
      date?: string | null
      description?: string
      /**
       * Latitude of the tag's location, if applicable. Can be used to draw a map.
       */
      latitude?: number | null
      /**
       * Latitude of the tag's location, if applicable. Can be used to draw a map.
       */
      longitude?: number | null
      /**
       * Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
       */
      zoom_level?: number | null
    }
    TagRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['TagModel']
      links: components['schemas']['ObjectLink']
    }
    TagSingle: { data: components['schemas']['TagRead'] }
    Transaction: {
      created_at?: string
      updated_at?: string
      /**
       * User ID
       */
      user?: number
      /**
       * Break if the submitted transaction exists already.
       */
      error_if_duplicate_hash?: boolean
      /**
       * Whether or not to apply rules when submitting transaction.
       */
      apply_rules?: boolean
      /**
       * Title of the transaction if it has been split in more than one piece. Empty otherwise.
       */
      group_title?: string
      transactions: Array<components['schemas']['TransactionSplit']>
    }
    TransactionArray: {
      data: Array<components['schemas']['TransactionRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    TransactionLink: {
      created_at?: string
      updated_at?: string
      /**
       * The link type ID to use. You can also use the link_type_name field.
       */
      link_type_id: number
      /**
       * The link type name to use. You can also use the link_type_id field.
       */
      link_type_name?: string
      /**
       * The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.
       */
      inward_id: number
      /**
       * The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.
       */
      outward_id: number
      /**
       * Optional. Some notes.
       */
      notes?: string
    }
    TransactionLinkArray: {
      data: Array<components['schemas']['TransactionLinkRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    TransactionLinkRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['TransactionLink']
      links: components['schemas']['ObjectLink']
    }
    TransactionLinkSingle: {
      data: components['schemas']['TransactionLinkRead']
    }
    TransactionRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['Transaction']
      links: components['schemas']['ObjectLink']
    }
    TransactionSingle: { data: components['schemas']['TransactionRead'] }
    TransactionSplit: {
      /**
       * User ID
       */
      user?: number
      /**
       * ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals
       * making up the splits of the transaction.
       */
      transaction_journal_id?: number
      /**
       * Type of transaction.
       */
      type?: 'withdrawal' | 'deposit' | 'transfer' | 'reconciliation'
      /**
       * Date of the transaction
       */
      date: string
      /**
       * Amount of the transaction.
       */
      amount: string
      /**
       * Description of the transaction.
       */
      description: string
      /**
       * Order of this entry in the list of transactions.
       */
      order?: number | null
      /**
       * Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.
       */
      currency_id?: number | null
      /**
       * Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.
       */
      currency_code?: string | null
      currency_symbol?: string
      currency_name?: string
      /**
       * Number of decimals used in this currency.
       */
      currency_decimal_places?: number
      /**
       * The amount in a foreign currency.
       */
      foreign_amount?: string | null
      /**
       * Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
       */
      foreign_currency_id?: number | null
      /**
       * Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
       */
      foreign_currency_code?: string | null
      foreign_currency_symbol?: string | null
      /**
       * Number of decimals in the currency
       */
      foreign_currency_decimal_places?: number | null
      /**
       * The budget ID for this transaction.
       */
      budget_id?: number | null
      /**
       * The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
       */
      budget_name?: string | null
      /**
       * The category ID for this transaction.
       */
      category_id?: number | null
      /**
       * The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
       */
      category_name?: string
      /**
       * ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
       */
      source_id: number | null
      /**
       * Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
       */
      source_name?: string | null
      source_iban?: string | null
      source_type?: components['schemas']['AccountTypeProperty']
      /**
       * ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
       */
      destination_id: number | null
      /**
       * Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
       */
      destination_name?: string | null
      destination_iban?: string | null
      destination_type?: components['schemas']['AccountTypeProperty']
      /**
       * If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
       */
      reconciled?: boolean
      /**
       * Optional. Use either this or the piggy_bank_name
       */
      piggy_bank_id?: number
      /**
       * Optional. Use either this or the piggy_bank_id
       */
      piggy_bank_name?: string
      /**
       * Optional. Use either this or the bill_name
       */
      bill_id?: number | null
      /**
       * Optional. Use either this or the bill_id
       */
      bill_name?: string | null
      /**
       * Array of tags.
       */
      tags?: string[] | null
      notes?: string | null
      /**
       * Reference to internal reference of other systems.
       */
      internal_reference?: string | null
      /**
       * Reference to external ID in other systems.
       */
      external_id?: string | null
      /**
       * System generated identifier for original creator of transaction.
       */
      original_source?: string | null
      /**
       * Reference to recurrence that made the transaction.
       */
      recurrence_id?: number | null
      /**
       * Internal ID of bunq transaction.
       */
      bunq_payment_id?: string | null
      /**
       * Hash value of original import transaction (for duplicate detection).
       */
      import_hash_v2?: string | null
      /**
       * SEPA Clearing Code
       */
      sepa_cc?: string | null
      /**
       * SEPA Opposing Account Identifier
       */
      sepa_ct_op?: string
      /**
       * SEPA end-to-end Identifier
       */
      sepa_ct_id?: string | null
      /**
       * SEPA mandate identifier
       */
      sepa_db?: string | null
      /**
       * SEPA Country
       */
      sepa_country?: string | null
      /**
       * SEPA External Purpose indicator
       */
      sepa_ep?: string | null
      /**
       * SEPA Creditor Identifier
       */
      sepa_ci?: string | null
      /**
       * SEPA Batch ID
       */
      sepa_batch_id?: string | null
      interest_date?: string | null
      book_date?: string | null
      process_date?: string | null
      due_date?: string | null
      payment_date?: string | null
      invoice_date?: string | null
    }
    TransactionTypeFilter:
    | 'all'
    | 'withdrawal'
    | 'withdrawals'
    | 'expense'
    | 'deposit'
    | 'deposits'
    | 'income'
    | 'transfer'
    | 'transfers'
    | 'opening_balance'
    | 'reconciliation'
    | 'special'
    | 'specials'
    | 'default'
    User: {
      created_at?: string
      updated_at?: string
      /**
       * The new users email address.
       */
      email: string
      /**
       * Boolean to indicate if the user is blocked.
       */
      blocked?: boolean
      /**
       * If you say the user must be blocked, this will be the reason code.
       */
      blocked_code?: 'email_changed' | null
      /**
       * Role for the new user. Can be empty or omitted.
       */
      role?: ('owner' | 'demo') | null
    }
    UserArray: {
      data: Array<components['schemas']['UserRead']>
      meta: components['schemas']['Meta']
      links: components['schemas']['PageLink']
    }
    UserRead: {
      /**
       * Immutable value
       */
      type: string
      id: string
      attributes: components['schemas']['User']
      links: components['schemas']['ObjectLink']
    }
    UserSingle: { data: components['schemas']['UserRead'] }
    ValidationError: {
      message?: string
      errors?: { field1?: string[], field2?: string[] }
    }
  }
}
